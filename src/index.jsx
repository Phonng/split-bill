import { render } from "preact";
import { useState, useEffect } from "preact/hooks";
import "./style.css";

function App() {
  const [currentPage, setCurrentPage] = useState("main"); // "main" ho·∫∑c "history"
  const [originalAmount, setOriginalAmount] = useState("");
  const [finalAmount, setFinalAmount] = useState("");
  const [shippingFee, setShippingFee] = useState("");
  const [people, setPeople] = useState([{ id: 1, name: "Ng∆∞·ªùi 1", amount: 0 }]);
  const [results, setResults] = useState(null);
  const [paymentHistory, setPaymentHistory] = useState([]);

  // Load l·ªãch s·ª≠ t·ª´ localStorage khi component mount
  useEffect(() => {
    const savedHistory = localStorage.getItem("splitBillHistory");
    if (savedHistory) {
      try {
        setPaymentHistory(JSON.parse(savedHistory));
      } catch (error) {
        console.error("L·ªói khi load l·ªãch s·ª≠:", error);
      }
    }
  }, []);

  // L∆∞u k·∫øt qu·∫£ thanh to√°n v√†o localStorage
  const savePaymentResult = (result) => {
    const newHistoryItem = {
      id: Date.now(),
      timestamp: new Date().toLocaleString("vi-VN"),
      ...result,
    };

    const updatedHistory = [newHistoryItem, ...paymentHistory].slice(0, 5); // Gi·ªØ t·ªëi ƒëa 5 l·∫ßn
    setPaymentHistory(updatedHistory);

    try {
      localStorage.setItem("splitBillHistory", JSON.stringify(updatedHistory));
    } catch (error) {
      console.error("L·ªói khi l∆∞u l·ªãch s·ª≠:", error);
    }
  };

  // X√≥a m·ªôt l·ªãch s·ª≠ c·ª• th·ªÉ
  const deleteHistoryItem = (id) => {
    const updatedHistory = paymentHistory.filter((item) => item.id !== id);
    setPaymentHistory(updatedHistory);

    try {
      localStorage.setItem("splitBillHistory", JSON.stringify(updatedHistory));
    } catch (error) {
      console.error("L·ªói khi x√≥a l·ªãch s·ª≠:", error);
    }
  };

  // X√≥a to√†n b·ªô l·ªãch s·ª≠
  const clearAllHistory = () => {
    setPaymentHistory([]);
    try {
      localStorage.removeItem("splitBillHistory");
    } catch (error) {
      console.error("L·ªói khi x√≥a to√†n b·ªô l·ªãch s·ª≠:", error);
    }
  };

  // X·ª≠ l√Ω focus v√†o input s·ªë ti·ªÅn h√†ng
  const handleOriginalAmountFocus = (e) => {
    e.target.select();
    // N·∫øu gi√° tr·ªã l√† 0, x√≥a ƒë·ªÉ tr·ªëng
    if (e.target.value === "0") {
      setOriginalAmount("");
    }
  };

  // X·ª≠ l√Ω focus v√†o input ph√≠ ship
  const handleShippingFeeFocus = (e) => {
    e.target.select();
    // N·∫øu gi√° tr·ªã l√† 0, x√≥a ƒë·ªÉ tr·ªëng
    if (e.target.value === "0") {
      setShippingFee("");
    }
  };

  // X·ª≠ l√Ω focus v√†o input s·ªë ti·ªÅn cu·ªëi c√πng
  const handleFinalAmountFocus = (e) => {
    e.target.select();
    // N·∫øu gi√° tr·ªã l√† 0, x√≥a ƒë·ªÉ tr·ªëng
    if (e.target.value === "0") {
      setFinalAmount("");
    }
  };

  // X·ª≠ l√Ω focus v√†o input s·ªë ti·ªÅn c·ªßa ng∆∞·ªùi
  const handlePersonAmountFocus = (personId, e) => {
    e.target.select();
    // N·∫øu gi√° tr·ªã l√† 0, x√≥a ƒë·ªÉ tr·ªëng
    if (e.target.value === "0") {
      updatePerson(personId, "amount", "");
    }
  };

  const addPerson = () => {
    const newId = people.length + 1;
    setPeople([...people, { id: newId, name: `Ng∆∞·ªùi ${newId}`, amount: 0 }]);
  };

  const removePerson = (id) => {
    if (people.length > 1) {
      setPeople(people.filter((person) => person.id !== id));
    }
  };

  const updatePerson = (id, field, value) => {
    setPeople(
      people.map((person) =>
        person.id === id ? { ...person, [field]: value } : person
      )
    );
  };

  const calculateSplit = () => {
    const original = parseFloat(originalAmount) || 0;
    const final = parseFloat(finalAmount) || 0;
    const shipping = parseFloat(shippingFee) || 0;

    // T√≠nh to√°n: Ph√≠ ship ƒë∆∞·ª£c t√≠nh v√†o s·ªë ti·ªÅn g·ªëc
    const originalWithShipping = original + shipping;
    const discountAmount = originalWithShipping - final;

    const totalPersonAmount = people.reduce(
      (sum, person) => sum + (parseFloat(person.amount) || 0),
      0
    );

    if (totalPersonAmount === 0) {
      // Chia ƒë·ªÅu
      const perPerson = final / people.length;
      const newPeople = people.map((person) => ({
        ...person,
        payAmount: perPerson,
      }));
      const result = {
        originalTotal: original,
        shippingFee: shipping,
        originalWithShipping,
        discountAmount,
        finalTotal: final,
        people: newPeople,
        splitType: "equal",
      };
      setResults(result);
      // T·ª± ƒë·ªông l∆∞u k·∫øt qu·∫£
      savePaymentResult(result);
    } else {
      // Chia theo t·ª∑ l·ªá
      const newPeople = people.map((person) => {
        const personAmount = parseFloat(person.amount) || 0;
        const ratio = personAmount / totalPersonAmount;
        const payAmount = final * ratio;
        return {
          ...person,
          payAmount,
        };
      });
      const result = {
        originalTotal: original,
        shippingFee: shipping,
        originalWithShipping,
        discountAmount,
        finalTotal: final,
        people: newPeople,
        splitType: "proportional",
      };
      setResults(result);
      // T·ª± ƒë·ªông l∆∞u k·∫øt qu·∫£
      savePaymentResult(result);
    }
  };

  const resetForm = () => {
    setOriginalAmount("");
    setFinalAmount("");
    setShippingFee("");
    setPeople([{ id: 1, name: "Ng∆∞·ªùi 1", amount: 0 }]);
    setResults(null);
  };

  return (
    <div className="app">
      <header className="header">
        <h1>üí∞ Chia Ti·ªÅn</h1>
        <p>Chia s·∫ª h√≥a ƒë∆°n m·ªôt c√°ch c√¥ng b·∫±ng</p>
        <nav className="nav">
          <button
            onClick={() => setCurrentPage("main")}
            className={`nav-btn ${currentPage === "main" ? "active" : ""}`}
          >
            üè† Trang ch√≠nh
          </button>
          <button
            onClick={() => setCurrentPage("history")}
            className={`nav-btn ${currentPage === "history" ? "active" : ""}`}
          >
            üìã L·ªãch s·ª≠ ({paymentHistory.length})
          </button>
        </nav>
      </header>

      <main className="main">
        {currentPage === "history" ? (
          <div className="history-container">
            <div className="history-header">
              <h2>üìã L·ªãch s·ª≠ thanh to√°n</h2>
              {paymentHistory.length > 0 && (
                <button onClick={clearAllHistory} className="btn-clear-all">
                  üóëÔ∏è X√≥a t·∫•t c·∫£
                </button>
              )}
            </div>

            {paymentHistory.length === 0 ? (
              <div className="empty-history">
                <p>üìù Ch∆∞a c√≥ l·ªãch s·ª≠ thanh to√°n n√†o</p>
                <p>H√£y t√≠nh to√°n v√† l∆∞u k·∫øt qu·∫£ ƒë·ªÉ xem l·ªãch s·ª≠ ·ªü ƒë√¢y!</p>
              </div>
            ) : (
              <div className="history-list">
                {paymentHistory.map((item) => (
                  <div key={item.id} className="history-item">
                    <div className="history-item-header">
                      <div className="history-info">
                        <span className="history-date">{item.timestamp}</span>
                        <span className="history-total">
                          T·ªïng: {item.finalTotal.toLocaleString("vi-VN")} ‚Ç´
                        </span>
                      </div>
                      <button
                        onClick={() => deleteHistoryItem(item.id)}
                        className="btn-delete-item"
                        title="X√≥a l·ªãch s·ª≠ n√†y"
                      >
                        üóëÔ∏è
                      </button>
                    </div>

                    <div className="history-summary">
                      <div className="summary-row">
                        <span>S·ªë ti·ªÅn h√†ng:</span>
                        <span>
                          {item.originalTotal.toLocaleString("vi-VN")} ‚Ç´
                        </span>
                      </div>
                      <div className="summary-row">
                        <span>Ph√≠ ship:</span>
                        <span>
                          +{item.shippingFee.toLocaleString("vi-VN")} ‚Ç´
                        </span>
                      </div>
                      <div className="summary-row">
                        <span>Gi·∫£m gi√°:</span>
                        <span className="discount">
                          -{item.discountAmount.toLocaleString("vi-VN")} ‚Ç´
                        </span>
                      </div>
                      <div className="summary-row total">
                        <span>S·ªë ti·ªÅn cu·ªëi:</span>
                        <span>{item.finalTotal.toLocaleString("vi-VN")} ‚Ç´</span>
                      </div>
                    </div>

                    <div className="history-split-info">
                      <p>
                        {item.splitType === "equal"
                          ? "‚úÖ Chia ƒë·ªÅu cho t·∫•t c·∫£ m·ªçi ng∆∞·ªùi"
                          : "üìä Chia theo t·ª∑ l·ªá s·ªë ti·ªÅn m·ªói ng∆∞·ªùi ƒë·∫∑t"}
                      </p>
                    </div>

                    <div className="history-people">
                      <h4>Chi ti·∫øt t·ª´ng ng∆∞·ªùi:</h4>
                      {item.people.map((person) => (
                        <div key={person.id} className="history-person">
                          <span className="person-name">{person.name}</span>
                          {item.splitType === "proportional" && (
                            <span className="person-original">
                              (ƒê·∫∑t:{" "}
                              {parseFloat(person.amount || 0).toLocaleString(
                                "vi-VN"
                              )}{" "}
                              ‚Ç´)
                            </span>
                          )}
                          <span className="person-pay">
                            {person.payAmount.toLocaleString("vi-VN")} ‚Ç´
                          </span>
                        </div>
                      ))}
                    </div>
                  </div>
                ))}
              </div>
            )}
          </div>
        ) : !results ? (
          <div className="form-container">
            <div className="form-section">
              <h2>üìã Th√¥ng tin ƒë∆°n h√†ng</h2>
              <div className="input-group">
                <label htmlFor="originalAmount">S·ªë ti·ªÅn h√†ng (VNƒê):</label>
                <input
                  type="number"
                  id="originalAmount"
                  value={originalAmount}
                  onChange={(e) => setOriginalAmount(e.target.value)}
                  onFocus={handleOriginalAmountFocus}
                  placeholder="Nh·∫≠p s·ªë ti·ªÅn h√†ng..."
                  min="0"
                />
              </div>

              <div className="input-group">
                <label htmlFor="shippingFee">Ph√≠ ship (VNƒê):</label>
                <input
                  type="number"
                  id="shippingFee"
                  value={shippingFee}
                  onChange={(e) => setShippingFee(e.target.value)}
                  onFocus={handleShippingFeeFocus}
                  placeholder="Nh·∫≠p ph√≠ ship..."
                  min="0"
                />
              </div>

              <div className="input-group">
                <label htmlFor="finalAmount">S·ªë ti·ªÅn cu·ªëi c√πng (VNƒê):</label>
                <input
                  type="number"
                  id="finalAmount"
                  value={finalAmount}
                  onChange={(e) => setFinalAmount(e.target.value)}
                  onFocus={handleFinalAmountFocus}
                  placeholder="Nh·∫≠p s·ªë ti·ªÅn cu·ªëi c√πng..."
                  min="0"
                />
              </div>
            </div>

            <div className="form-section">
              <div className="section-header">
                <h2>üë• Danh s√°ch ng∆∞·ªùi tham gia</h2>
              </div>

              <div className="people-table-container">
                <table className="people-table">
                  <thead>
                    <tr>
                      <th className="col-name">T√™n ng∆∞·ªùi</th>
                      <th className="col-amount">S·ªë ti·ªÅn ƒë·∫∑t (VNƒê)</th>
                      <th className="col-actions">Thao t√°c</th>
                    </tr>
                  </thead>
                  <tbody>
                    {people.map((person) => (
                      <tr key={person.id} className="person-row">
                        <td>
                          <input
                            type="text"
                            value={person.name}
                            onChange={(e) =>
                              updatePerson(person.id, "name", e.target.value)
                            }
                            placeholder="Nh·∫≠p t√™n..."
                            className="table-input name-input"
                          />
                        </td>
                        <td>
                          <input
                            type="number"
                            value={person.amount}
                            onChange={(e) =>
                              updatePerson(person.id, "amount", e.target.value)
                            }
                            onFocus={(e) =>
                              handlePersonAmountFocus(person.id, e)
                            }
                            placeholder="0"
                            min="0"
                            className="table-input amount-input"
                          />
                        </td>
                        <td className="actions-cell">
                          {people.length > 1 && (
                            <button
                              onClick={() => removePerson(person.id)}
                              className="btn-remove-table"
                              title="X√≥a ng∆∞·ªùi n√†y"
                            >
                              üóëÔ∏è
                            </button>
                          )}
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>

              <div className="add-person-section">
                <button onClick={addPerson} className="btn-add">
                  ‚ûï Th√™m ng∆∞·ªùi
                </button>
              </div>

              <div className="note">
                üí° <strong>L∆∞u √Ω:</strong> ƒê·ªÉ tr·ªëng s·ªë ti·ªÅn ƒë·ªÉ chia ƒë·ªÅu, ho·∫∑c
                nh·∫≠p s·ªë ti·ªÅn m·ªói ng∆∞·ªùi ƒë·∫∑t ƒë·ªÉ chia theo t·ª∑ l·ªá. Ph√≠ ship s·∫Ω ƒë∆∞·ª£c
                t√≠nh v√†o s·ªë ti·ªÅn g·ªëc v√† √°p d·ª•ng gi·∫£m gi√° c√πng v·ªõi h√†ng.
              </div>
            </div>

            <div className="form-actions">
              <button onClick={calculateSplit} className="btn-calculate">
                üßÆ T√≠nh to√°n
              </button>
            </div>
          </div>
        ) : (
          <div className="results-container">
            <div className="results-header">
              <h2>üìä K·∫øt qu·∫£ chia ti·ªÅn</h2>
              <div className="results-actions">
                <button onClick={resetForm} className="btn-reset">
                  üîÑ T√≠nh l·∫°i
                </button>
              </div>
            </div>

            <div className="summary">
              <div className="summary-item">
                <span>S·ªë ti·ªÅn h√†ng:</span>
                <span className="amount">
                  {results.originalTotal.toLocaleString("vi-VN")} ‚Ç´
                </span>
              </div>
              <div className="summary-item">
                <span>Ph√≠ ship:</span>
                <span className="amount shipping">
                  +{results.shippingFee.toLocaleString("vi-VN")} ‚Ç´
                </span>
              </div>
              <div className="summary-item">
                <span>T·ªïng g·ªëc (h√†ng + ship):</span>
                <span className="amount">
                  {results.originalWithShipping.toLocaleString("vi-VN")} ‚Ç´
                </span>
              </div>
              <div className="summary-item">
                <span>Gi·∫£m gi√°:</span>
                <span className="amount discount">
                  -{results.discountAmount.toLocaleString("vi-VN")} ‚Ç´
                </span>
              </div>
              <div className="summary-item total">
                <span>S·ªë ti·ªÅn cu·ªëi c√πng:</span>
                <span className="amount">
                  {results.finalTotal.toLocaleString("vi-VN")} ‚Ç´
                </span>
              </div>
            </div>

            <div className="split-info">
              <p>
                {results.splitType === "equal"
                  ? "‚úÖ Chia ƒë·ªÅu cho t·∫•t c·∫£ m·ªçi ng∆∞·ªùi"
                  : "üìä Chia theo t·ª∑ l·ªá s·ªë ti·ªÅn m·ªói ng∆∞·ªùi ƒë·∫∑t"}
              </p>
              <p className="auto-save-notice">
                üíæ K·∫øt qu·∫£ ƒë√£ ƒë∆∞·ª£c t·ª± ƒë·ªông l∆∞u v√†o l·ªãch s·ª≠
              </p>
            </div>

            <div className="people-results">
              <h3>Chi ti·∫øt t·ª´ng ng∆∞·ªùi:</h3>
              {results.people.map((person) => (
                <div key={person.id} className="person-result">
                  <div className="person-info">
                    <span className="person-name">{person.name}</span>
                    {results.splitType === "proportional" && (
                      <span className="person-original">
                        (ƒê·∫∑t:{" "}
                        {parseFloat(person.amount || 0).toLocaleString("vi-VN")}{" "}
                        ‚Ç´)
                      </span>
                    )}
                  </div>
                  <div className="person-pay">
                    <span className="pay-amount">
                      {person.payAmount.toLocaleString("vi-VN")} ‚Ç´
                    </span>
                  </div>
                </div>
              ))}
            </div>

            <div className="total-check">
              <div className="total-check-item">
                <span>T·ªïng c·ªông:</span>
                <span className="amount">
                  {results.people
                    .reduce((sum, person) => sum + person.payAmount, 0)
                    .toLocaleString("vi-VN")}{" "}
                  ‚Ç´
                </span>
              </div>
            </div>
          </div>
        )}
      </main>
    </div>
  );
}

render(<App />, document.getElementById("app"));
